"""ebayrest.py
"""
import requests
import resources
import base64

class Client():

    def __init__(self, token=None, client_id=None, client_secret=None, marketplace_id='EBAY_US', sandbox=False):
        """Initialize eBay Client.

        Parameters
        ----------
        token : str
        client_id : str
            App ID
        client_secret : str
            Cert ID
        marketplace_id : str
        sandbox : bool
            A flag indicating whether to use the sandbox or production
            endpoints.

        """
        self.token = token
        self.client_id = client_id
        self.client_secret = client_secret
        self.marketplace_id = marketplace_id
        self.sandbox = sandbox

        self.inventory = resources.Inventory(self)

    def get_base(self):
        """Return the base endpoint for the eBay URL.

        Parameters
        ----------
        is_sandbox : bool

        Return
        ------
        str

        """
        if self.sandbox:
            base = 'https://api.sandbox.ebay.com/'
        else:
            base = 'https://api.ebay.com/'
        return base

    def get_auth_base(self):
        """Return the base endpoint for the eBay URL.

        Parameters
        ----------
        is_sandbox : bool

        Return
        ------
        str

        """
        if self.sandbox:
            base = 'https://auth.sandbox.ebay.com/'
        else:
            base = 'https://auth.ebay.com/'
        return base

    def get_headers(self):
        """Get headers for API requests.

        Parameters
        ----------
        None
        
        Returns
        -------
        dict

        """
        headers = {
            'Accept': 'application/json',
            'Accept-Charset': 'utf-8',
            'Accept-Encoding': 'application/gzip',
            'Authorization': 'Bearer {}'.format(self.token),
            'Content-Type': 'application/json',
            'X-EBAY-C-MARKETPLACE-ID':  self.marketplace_id,
        }
        return headers

    def _get_oauth_credentials(self):
        """Returns oauth credentials for the get_user_token() call.

        base64 encoded "<client_id>:<client_secret>"

        Returns
        -------
        str

        """
        return base64.b64encode('{}:{}'.format(self.client_id, self.client_secret))

    def get_auth_code_url(self, **kwargs):
        """Get the auth code URL string.

        Parameters
        ----------
        state : str
        redirect_uri : str
            This is the RuName, not the actual URL
            https://developer.ebay.com/api-docs/static/oauth-redirect-uri.html
        scope : list

        Returns
        -------
        str

        """
        required = ['state', 'redirect_uri', 'scope']
        url = '{}oauth2/authorize'.format(self.get_auth_base())
        params = {
            'response_type': 'code',
            'client_id': self.client_id
        }
        for req in required:
            if req not in kwargs:
                raise ValueError('{} is a required argument'.format(req))
        for kwarg in kwargs:
            if kwargs[kwarg] is None and kwarg in required:
                raise ValueError('`{}` is a required argument.'.format(kwarg))
            elif kwargs[kwarg] is not None:
                if kwarg == 'scope':
                    scope = '%20'.join(kwargs[kwarg])
                else:
                    params[kwarg] = kwargs[kwarg]
        req = requests.Request('GET', url, params=params)
        prepped = req.prepare()
        url = prepped.url + '&scope={}'.format(scope)
        return prepped.url

    def get_user_token(self, code, redirect_uri):
        """Makes request to eBay for a User Token.

        Parameters
        ----------
        code : str
            Sent back as a parameter in "redirect_uri" after visiting the URL
            generated by self.get_auth_code_url()
        redirect_uri : str

        Returns
        -------
        Response

        """
        url = '{}identity/v1/oauth2/token'.format(self.get_base())
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': 'Basic {}'.format(self._get_oauth_credentials())
        }
        body = {
            'grant_type': 'authorization_code',
            'code': code,
            'redirect_uri': redirect_uri,
        }
        r = requests.post(url, data=body, headers=headers)
        return r

    def refresh_token(self, refresh_token, scope):
        """Refresh our token using our refresh_token value.

        Parameters
        ----------
        refresh_token : str
        scope : list

        Returns
        -------
        Response

        """
        url = '{}identity/v1/oauth2/token'.format(self.get_base())
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': 'Basic {}'.format(self._get_oauth_credentials())
        }
        body = {
            'grant_type': 'refresh_token',
            'scope': scope,
            'refresh_token': refresh_token,
        }
        r = requests.post(url, data=body, headers=headers)
        return r